# default config file
# simulation time in minutes
simulation_time=30
# QUI disattiva i grafici per la simulazione parallela
parallel_simulation=false

# edge devices count
min_number_of_edge_devices=50
max_number_of_edge_devices=50
#incremento
edge_device_counter_size=50

#Latency on Cloud, if true the tasks are subjected to latency constraint when offloaded to Cloud
cloud_latency=true

#Seed for determine the random generator (0 for random seed)
#seed=4
seed=250814

#Quadrant arrangement
quadrant_arrangement=false
# simulation area/map (meters)
# remember to update the edge data centers location when you change the map size (in the edge_datacenters.xml file)
length=250
width=250

#Parameter to adjust the threshold of the findVM algorithm (Cloudlet queue)
factor=0

# deploy the orchestration node (Options: CLOUD, EDGE, or MIST, you can add your own by editing the  selectOrch() method in Servermanager.java)
# Edge means that every edge device orchestrates its tasks for itself
# Ho aggiunto CLUSTER modificando anche il metodo selectOrchestrators di ServerManager
# Ho aggiunto LEADER modificando anche il metodo selectOrchestrators di ServerManager e LeaderEdgeDevice
# I added EDGE_AND_CLOUD in order to use both as orchestrator
# EDGE_AND_CLOUD, LEADER, NEIGHBOUR
deploy_orchestrator=NEIGHBOUR

# task orchestration settings
# use ',' for multiple values
#orchestration_architectures=CLOUD_ONLY, MIST_ONLY
orchestration_architectures= EDGE_AND_CLOUD
#CLOUD_ONLY,EDGE_ONLY,MIST_ONLY,MIST_AND_CLOUD,EDGE_AND_CLOUD,ALL

# use ',' for multiple values
orchestration_algorithms=LEADER
#INCREASE_LIFETIME,ROUND_ROBIN,TRADE_OFF,FUZZY_LOGIC,  LEADER

# initialization time (in seconds) : the time needed to generate all the resources, before starting the simulation
initialization_time=100
# interval between events (in seconds) set it between 0.1 and 1 (or 2 3 4..) the more it is the less will be the accuracy
update_interval=0.1
# pause length between iterations (in seconds)
pause_length=0
# display real time charts
display_real_time_charts=true
# close charts when simulation ends 
auto_close_real_time_charts=true
# real time charts refresh interval
charts_update_interval=1
# save charts as bitmap files
save_charts=true

# wlan range (meters): the distance (radius) in which two devices (or a device and a edge data center) can offload to each others. 
# once a device change its location if it quits this range, the task will be considered as failed due to mobility.
edge_devices_range=90
# be carefull when setting the edge data centers coverage area when the EDGE_ONLY architecture is used,as some tasks may fail (because no resources found)
# so be sure that edge servers cover all the map. except if your scenario requires low coverage area
edge_datacenters_coverage=90

# enable registry 
# true : means that the device will download the application from the registry 
#       after receiving the offloaded tasks ( the container size will be used, see applications.xml file)
# false: the device will execute directly the offloaded task (no container will be downloaded) (DEFAULT)
enable_registry=false
# CLOUD = default location, you can mirror the container elsewhere programmatically by extending the defaultNetworkModel  
registry_mode=CLOUD

# CPU allocation policy (TIME_SHARED=  containers , SPACE_SHARED= VM)
# choose : TIME_SHARED or SPACE_SHARED ,  default = SPACE_SHARED
# time shared require will take lot of time as compared to space shared
# https://stackoverflow.com/questions/16590723/difference-between-time-shared-and-space-shared-algorithms
Applications_CPU_allocation_policy=SPACE_SHARED

# log settings
save_log_file=true
clear_output_folder=false
deep_log_enabled=false



# network settings 
# bandwidths in  megabits per seconds 
wlan_bandwidth=300
# internet speed or backhaul network speed, the less bandwidth, the more the simulation will take
wan_bandwidth=300
wan_propogation_delay=0.1
# enabling this will give more accurate results, but also will increase the simulation duration

realistic_network_model=true
# network update interval (in seconds) transmission update ( 0.1 to 1= better accuracy but it takes longer, 2 or more = less details but faster simulation)
# default=1 (to minimize simulation time)
network_update_interval=0.1


# energy model settings
# consumed energy for every transmitted or received bit ( Joul per bit : J/bit)
consumed_energy_per_bit=0.0000000
# amplifier energy dissipation in free space channel (Joul per bit per square meter : J/bit/m^2)
amplifier_dissipation_free_space=0.0000000000
# amplifier energy dissipation in multipath fading channel (Joul per bit per meter^4 : J/bit/m^4)
amplifier_dissipation_multipath=0.00000000000000

# end the simulation when the time ends or wait to all the tasks to get executed?
# it better to wait for all the tasks to get executed to get better results, however this may takes hours longer
# disabling this will gives you high tasks failure due to stopping simulation early (see the console) but it will decrease the simulation time
wait_for_all_tasks=true

enable_orchestrators=true



#Custom parameters

#If true the number of orchestrators is capped at the sqare root of the current number of datacenters (edge devices included)
orch_scaling=false
#If orch_scaling is false the number of orchestrator is capped at the number specified in max_edge_orch
max_orch=99999


#Debug
debug=false

